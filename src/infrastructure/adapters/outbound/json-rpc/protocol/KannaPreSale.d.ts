/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import type { TypedEventFilter, TypedEvent, TypedListener } from './common';

interface KannaPreSaleInterface extends ethers.utils.Interface {
  functions: {
    'CLAIM_MANAGER_ROLE()': FunctionFragment;
    'DEFAULT_ADMIN_ROLE()': FunctionFragment;
    'KNN_DECIMALS()': FunctionFragment;
    'USD_AGGREGATOR_DECIMALS()': FunctionFragment;
    'addClaimManager(address)': FunctionFragment;
    'available()': FunctionFragment;
    'availableSupply()': FunctionFragment;
    'buyTokens()': FunctionFragment;
    'claim(address,uint256,uint256,bool)': FunctionFragment;
    'convertToKNN(uint256)': FunctionFragment;
    'convertToWEI(uint256)': FunctionFragment;
    'end(address)': FunctionFragment;
    'getRoleAdmin(bytes32)': FunctionFragment;
    'grantRole(bytes32,address)': FunctionFragment;
    'hasRole(bytes32,address)': FunctionFragment;
    'knnLocked()': FunctionFragment;
    'knnPriceInUSD()': FunctionFragment;
    'knnToken()': FunctionFragment;
    'lockSupply(uint256,uint256)': FunctionFragment;
    'owner()': FunctionFragment;
    'priceAggregator()': FunctionFragment;
    'removeClaimManager(address)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'renounceRole(bytes32,address)': FunctionFragment;
    'revokeRole(bytes32,address)': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'unlockSupply(uint256,uint256)': FunctionFragment;
    'updateAvailablity(bool)': FunctionFragment;
    'updateQuotation(uint256)': FunctionFragment;
    'withdraw(address)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'CLAIM_MANAGER_ROLE',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'DEFAULT_ADMIN_ROLE',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'KNN_DECIMALS',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'USD_AGGREGATOR_DECIMALS',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'addClaimManager',
    values: [string],
  ): string;
  encodeFunctionData(functionFragment: 'available', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'availableSupply',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'buyTokens', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'claim',
    values: [string, BigNumberish, BigNumberish, boolean],
  ): string;
  encodeFunctionData(
    functionFragment: 'convertToKNN',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'convertToWEI',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'end', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'getRoleAdmin',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'grantRole',
    values: [BytesLike, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'hasRole',
    values: [BytesLike, string],
  ): string;
  encodeFunctionData(functionFragment: 'knnLocked', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'knnPriceInUSD',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'knnToken', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'lockSupply',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'priceAggregator',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'removeClaimManager',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceRole',
    values: [BytesLike, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'revokeRole',
    values: [BytesLike, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'supportsInterface',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'unlockSupply',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateAvailablity',
    values: [boolean],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateQuotation',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [string]): string;

  decodeFunctionResult(
    functionFragment: 'CLAIM_MANAGER_ROLE',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'DEFAULT_ADMIN_ROLE',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'KNN_DECIMALS',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'USD_AGGREGATOR_DECIMALS',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'addClaimManager',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'available', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'availableSupply',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'buyTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claim', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'convertToKNN',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'convertToWEI',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'end', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getRoleAdmin',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'knnLocked', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'knnPriceInUSD',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'knnToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lockSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'priceAggregator',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'removeClaimManager',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceRole',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'supportsInterface',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'unlockSupply',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateAvailablity',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateQuotation',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {
    'Claim(address,uint256,uint256)': EventFragment;
    'Lock(uint256,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Purchase(address,uint256,uint256,uint256,uint256)': EventFragment;
    'QuotationUpdate(address,uint256,uint256)': EventFragment;
    'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment;
    'RoleGranted(bytes32,address,address)': EventFragment;
    'RoleRevoked(bytes32,address,address)': EventFragment;
    'Unlock(uint256,uint256)': EventFragment;
    'Withdraw(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Claim'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Lock'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Purchase'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'QuotationUpdate'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unlock'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export type ClaimEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    holder: string;
    ref: BigNumber;
    amountInKNN: BigNumber;
  }
>;

export type LockEvent = TypedEvent<
  [BigNumber, BigNumber] & { ref: BigNumber; amountInKNN: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PurchaseEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
    holder: string;
    amountInWEI: BigNumber;
    knnPriceInUSD: BigNumber;
    ethPriceInUSD: BigNumber;
    amountInKNN: BigNumber;
  }
>;

export type QuotationUpdateEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    sender: string;
    from: BigNumber;
    to: BigNumber;
  }
>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string] & {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type UnlockEvent = TypedEvent<
  [BigNumber, BigNumber] & { ref: BigNumber; amountInKNN: BigNumber }
>;

export type WithdrawEvent = TypedEvent<
  [string, BigNumber] & { recipient: string; amount: BigNumber }
>;

export class KannaPreSale extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: KannaPreSaleInterface;

  functions: {
    CLAIM_MANAGER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    KNN_DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    USD_AGGREGATOR_DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    addClaimManager(
      claimManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    available(overrides?: CallOverrides): Promise<[boolean]>;

    availableSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    buyTokens(
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    claim(
      recipient: string,
      amountInKNN: BigNumberish,
      ref: BigNumberish,
      unlock: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    convertToKNN(
      amountInWEI: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    convertToWEI(
      amountInKNN: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    end(
      leftoverRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    knnLocked(overrides?: CallOverrides): Promise<[BigNumber]>;

    knnPriceInUSD(overrides?: CallOverrides): Promise<[BigNumber]>;

    knnToken(overrides?: CallOverrides): Promise<[string]>;

    lockSupply(
      amountInKNN: BigNumberish,
      ref: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    priceAggregator(overrides?: CallOverrides): Promise<[string]>;

    removeClaimManager(
      claimManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    unlockSupply(
      amountInKNN: BigNumberish,
      ref: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateAvailablity(
      _available: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateQuotation(
      targetQuotation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdraw(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  CLAIM_MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  KNN_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  USD_AGGREGATOR_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  addClaimManager(
    claimManager: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  available(overrides?: CallOverrides): Promise<boolean>;

  availableSupply(overrides?: CallOverrides): Promise<BigNumber>;

  buyTokens(
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  claim(
    recipient: string,
    amountInKNN: BigNumberish,
    ref: BigNumberish,
    unlock: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  convertToKNN(
    amountInWEI: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber]>;

  convertToWEI(
    amountInKNN: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber]>;

  end(
    leftoverRecipient: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  knnLocked(overrides?: CallOverrides): Promise<BigNumber>;

  knnPriceInUSD(overrides?: CallOverrides): Promise<BigNumber>;

  knnToken(overrides?: CallOverrides): Promise<string>;

  lockSupply(
    amountInKNN: BigNumberish,
    ref: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  priceAggregator(overrides?: CallOverrides): Promise<string>;

  removeClaimManager(
    claimManager: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  unlockSupply(
    amountInKNN: BigNumberish,
    ref: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateAvailablity(
    _available: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateQuotation(
    targetQuotation: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdraw(
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    CLAIM_MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    KNN_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    USD_AGGREGATOR_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    addClaimManager(
      claimManager: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    available(overrides?: CallOverrides): Promise<boolean>;

    availableSupply(overrides?: CallOverrides): Promise<BigNumber>;

    buyTokens(overrides?: CallOverrides): Promise<void>;

    claim(
      recipient: string,
      amountInKNN: BigNumberish,
      ref: BigNumberish,
      unlock: boolean,
      overrides?: CallOverrides,
    ): Promise<void>;

    convertToKNN(
      amountInWEI: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    convertToWEI(
      amountInKNN: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    end(leftoverRecipient: string, overrides?: CallOverrides): Promise<void>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    knnLocked(overrides?: CallOverrides): Promise<BigNumber>;

    knnPriceInUSD(overrides?: CallOverrides): Promise<BigNumber>;

    knnToken(overrides?: CallOverrides): Promise<string>;

    lockSupply(
      amountInKNN: BigNumberish,
      ref: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    priceAggregator(overrides?: CallOverrides): Promise<string>;

    removeClaimManager(
      claimManager: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    unlockSupply(
      amountInKNN: BigNumberish,
      ref: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateAvailablity(
      _available: boolean,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateQuotation(
      targetQuotation: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdraw(recipient: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'Claim(address,uint256,uint256)'(
      holder?: string | null,
      ref?: BigNumberish | null,
      amountInKNN?: null,
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { holder: string; ref: BigNumber; amountInKNN: BigNumber }
    >;

    Claim(
      holder?: string | null,
      ref?: BigNumberish | null,
      amountInKNN?: null,
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { holder: string; ref: BigNumber; amountInKNN: BigNumber }
    >;

    'Lock(uint256,uint256)'(
      ref?: BigNumberish | null,
      amountInKNN?: null,
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { ref: BigNumber; amountInKNN: BigNumber }
    >;

    Lock(
      ref?: BigNumberish | null,
      amountInKNN?: null,
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { ref: BigNumber; amountInKNN: BigNumber }
    >;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    'Purchase(address,uint256,uint256,uint256,uint256)'(
      holder?: string | null,
      amountInWEI?: null,
      knnPriceInUSD?: null,
      ethPriceInUSD?: null,
      amountInKNN?: BigNumberish | null,
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        holder: string;
        amountInWEI: BigNumber;
        knnPriceInUSD: BigNumber;
        ethPriceInUSD: BigNumber;
        amountInKNN: BigNumber;
      }
    >;

    Purchase(
      holder?: string | null,
      amountInWEI?: null,
      knnPriceInUSD?: null,
      ethPriceInUSD?: null,
      amountInKNN?: BigNumberish | null,
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        holder: string;
        amountInWEI: BigNumber;
        knnPriceInUSD: BigNumber;
        ethPriceInUSD: BigNumber;
        amountInKNN: BigNumber;
      }
    >;

    'QuotationUpdate(address,uint256,uint256)'(
      sender?: string | null,
      from?: null,
      to?: null,
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { sender: string; from: BigNumber; to: BigNumber }
    >;

    QuotationUpdate(
      sender?: string | null,
      from?: null,
      to?: null,
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { sender: string; from: BigNumber; to: BigNumber }
    >;

    'RoleAdminChanged(bytes32,bytes32,bytes32)'(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null,
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null,
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    'RoleGranted(bytes32,address,address)'(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    'RoleRevoked(bytes32,address,address)'(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    'Unlock(uint256,uint256)'(
      ref?: BigNumberish | null,
      amountInKNN?: null,
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { ref: BigNumber; amountInKNN: BigNumber }
    >;

    Unlock(
      ref?: BigNumberish | null,
      amountInKNN?: null,
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { ref: BigNumber; amountInKNN: BigNumber }
    >;

    'Withdraw(address,uint256)'(
      recipient?: string | null,
      amount?: null,
    ): TypedEventFilter<
      [string, BigNumber],
      { recipient: string; amount: BigNumber }
    >;

    Withdraw(
      recipient?: string | null,
      amount?: null,
    ): TypedEventFilter<
      [string, BigNumber],
      { recipient: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    CLAIM_MANAGER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    KNN_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    USD_AGGREGATOR_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    addClaimManager(
      claimManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    available(overrides?: CallOverrides): Promise<BigNumber>;

    availableSupply(overrides?: CallOverrides): Promise<BigNumber>;

    buyTokens(
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    claim(
      recipient: string,
      amountInKNN: BigNumberish,
      ref: BigNumberish,
      unlock: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    convertToKNN(
      amountInWEI: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    convertToWEI(
      amountInKNN: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    end(
      leftoverRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    knnLocked(overrides?: CallOverrides): Promise<BigNumber>;

    knnPriceInUSD(overrides?: CallOverrides): Promise<BigNumber>;

    knnToken(overrides?: CallOverrides): Promise<BigNumber>;

    lockSupply(
      amountInKNN: BigNumberish,
      ref: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    priceAggregator(overrides?: CallOverrides): Promise<BigNumber>;

    removeClaimManager(
      claimManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    unlockSupply(
      amountInKNN: BigNumberish,
      ref: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateAvailablity(
      _available: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateQuotation(
      targetQuotation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    withdraw(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CLAIM_MANAGER_ROLE(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    KNN_DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USD_AGGREGATOR_DECIMALS(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    addClaimManager(
      claimManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    available(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    availableSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyTokens(
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    claim(
      recipient: string,
      amountInKNN: BigNumberish,
      ref: BigNumberish,
      unlock: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    convertToKNN(
      amountInWEI: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    convertToWEI(
      amountInKNN: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    end(
      leftoverRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    knnLocked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    knnPriceInUSD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    knnToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockSupply(
      amountInKNN: BigNumberish,
      ref: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceAggregator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeClaimManager(
      claimManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    unlockSupply(
      amountInKNN: BigNumberish,
      ref: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateAvailablity(
      _available: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateQuotation(
      targetQuotation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdraw(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
