/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../common';

export interface KannaYieldInterface extends utils.Interface {
  functions: {
    'FEE_BASIS_POINT()': FunctionFragment;
    'addReward(uint256,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'calculateReward(address)': FunctionFragment;
    'collectFees()': FunctionFragment;
    'earned(address)': FunctionFragment;
    'endDate()': FunctionFragment;
    'exit()': FunctionFragment;
    'feeRecipient()': FunctionFragment;
    'fees(uint256)': FunctionFragment;
    'holderRewardPerTokenPaid(address)': FunctionFragment;
    'knnToken()': FunctionFragment;
    'knnYieldPool()': FunctionFragment;
    'knnYieldTotalFee()': FunctionFragment;
    'lastPaymentEvent()': FunctionFragment;
    'lastUpdateTime()': FunctionFragment;
    'owner()': FunctionFragment;
    'poolStartDate()': FunctionFragment;
    'rawBalances(address)': FunctionFragment;
    'reducedFee()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'rewardPerToken()': FunctionFragment;
    'rewardPerTokenStored()': FunctionFragment;
    'rewardRate()': FunctionFragment;
    'started(address)': FunctionFragment;
    'subscribe(uint256)': FunctionFragment;
    'subscriptionFee()': FunctionFragment;
    'tier(uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'withdraw(uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'FEE_BASIS_POINT'
      | 'addReward'
      | 'balanceOf'
      | 'calculateReward'
      | 'collectFees'
      | 'earned'
      | 'endDate'
      | 'exit'
      | 'feeRecipient'
      | 'fees'
      | 'holderRewardPerTokenPaid'
      | 'knnToken'
      | 'knnYieldPool'
      | 'knnYieldTotalFee'
      | 'lastPaymentEvent'
      | 'lastUpdateTime'
      | 'owner'
      | 'poolStartDate'
      | 'rawBalances'
      | 'reducedFee'
      | 'renounceOwnership'
      | 'rewardPerToken'
      | 'rewardPerTokenStored'
      | 'rewardRate'
      | 'started'
      | 'subscribe'
      | 'subscriptionFee'
      | 'tier'
      | 'transferOwnership'
      | 'withdraw',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'FEE_BASIS_POINT',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'addReward',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'balanceOf',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'calculateReward',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'collectFees',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'earned',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'endDate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'exit', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'feeRecipient',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'fees',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'holderRewardPerTokenPaid',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'knnToken', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'knnYieldPool',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'knnYieldTotalFee',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'lastPaymentEvent',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'lastUpdateTime',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'poolStartDate',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'rawBalances',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'reducedFee',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'rewardPerToken',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'rewardPerTokenStored',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'rewardRate',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'started',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'subscribe',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'subscriptionFee',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'tier',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [PromiseOrValue<BigNumberish>],
  ): string;

  decodeFunctionResult(
    functionFragment: 'FEE_BASIS_POINT',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'addReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'calculateReward',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'collectFees',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'earned', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'endDate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exit', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'feeRecipient',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'fees', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'holderRewardPerTokenPaid',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'knnToken', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'knnYieldPool',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'knnYieldTotalFee',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'lastPaymentEvent',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'lastUpdateTime',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'poolStartDate',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'rawBalances',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'reducedFee', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'rewardPerToken',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'rewardPerTokenStored',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'rewardRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'started', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'subscribe', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'subscriptionFee',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'tier', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {
    'Collect(address,address,uint256)': EventFragment;
    'Fee(address,uint256,uint256,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Reward(address,uint256)': EventFragment;
    'RewardAdded(address,uint256)': EventFragment;
    'Subscription(address,uint256,uint256,uint256)': EventFragment;
    'Withdraw(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Collect'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Fee'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Reward'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Subscription'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export interface CollectEventObject {
  user: string;
  returnAccount: string;
  fee: BigNumber;
}
export type CollectEvent = TypedEvent<
  [string, string, BigNumber],
  CollectEventObject
>;

export type CollectEventFilter = TypedEventFilter<CollectEvent>;

export interface FeeEventObject {
  user: string;
  amount: BigNumber;
  fee: BigNumber;
  finalAmount: BigNumber;
}
export type FeeEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  FeeEventObject
>;

export type FeeEventFilter = TypedEventFilter<FeeEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RewardEventObject {
  user: string;
  reward: BigNumber;
}
export type RewardEvent = TypedEvent<[string, BigNumber], RewardEventObject>;

export type RewardEventFilter = TypedEventFilter<RewardEvent>;

export interface RewardAddedEventObject {
  user: string;
  reward: BigNumber;
}
export type RewardAddedEvent = TypedEvent<
  [string, BigNumber],
  RewardAddedEventObject
>;

export type RewardAddedEventFilter = TypedEventFilter<RewardAddedEvent>;

export interface SubscriptionEventObject {
  user: string;
  subscriptionAmount: BigNumber;
  fee: BigNumber;
  finalAmount: BigNumber;
}
export type SubscriptionEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  SubscriptionEventObject
>;

export type SubscriptionEventFilter = TypedEventFilter<SubscriptionEvent>;

export interface WithdrawEventObject {
  user: string;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface KannaYield extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: KannaYieldInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FEE_BASIS_POINT(overrides?: CallOverrides): Promise<[BigNumber]>;

    addReward(
      reward: PromiseOrValue<BigNumberish>,
      rewardsDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    balanceOf(
      holder: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    calculateReward(
      holder: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    collectFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    earned(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    endDate(overrides?: CallOverrides): Promise<[BigNumber]>;

    exit(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    feeRecipient(overrides?: CallOverrides): Promise<[string]>;

    fees(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    holderRewardPerTokenPaid(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    knnToken(overrides?: CallOverrides): Promise<[string]>;

    knnYieldPool(overrides?: CallOverrides): Promise<[BigNumber]>;

    knnYieldTotalFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastPaymentEvent(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastUpdateTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    poolStartDate(overrides?: CallOverrides): Promise<[BigNumber]>;

    rawBalances(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    reducedFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    rewardPerToken(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardPerTokenStored(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    started(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    subscribe(
      subscriptionAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    subscriptionFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    tier(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  FEE_BASIS_POINT(overrides?: CallOverrides): Promise<BigNumber>;

  addReward(
    reward: PromiseOrValue<BigNumberish>,
    rewardsDuration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  balanceOf(
    holder: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  calculateReward(
    holder: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  collectFees(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  earned(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  endDate(overrides?: CallOverrides): Promise<BigNumber>;

  exit(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  feeRecipient(overrides?: CallOverrides): Promise<string>;

  fees(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  holderRewardPerTokenPaid(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  knnToken(overrides?: CallOverrides): Promise<string>;

  knnYieldPool(overrides?: CallOverrides): Promise<BigNumber>;

  knnYieldTotalFee(overrides?: CallOverrides): Promise<BigNumber>;

  lastPaymentEvent(overrides?: CallOverrides): Promise<BigNumber>;

  lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  poolStartDate(overrides?: CallOverrides): Promise<BigNumber>;

  rawBalances(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  reducedFee(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  rewardPerToken(overrides?: CallOverrides): Promise<BigNumber>;

  rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>;

  rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

  started(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  subscribe(
    subscriptionAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  subscriptionFee(overrides?: CallOverrides): Promise<BigNumber>;

  tier(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdraw(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    FEE_BASIS_POINT(overrides?: CallOverrides): Promise<BigNumber>;

    addReward(
      reward: PromiseOrValue<BigNumberish>,
      rewardsDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    balanceOf(
      holder: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    calculateReward(
      holder: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    collectFees(overrides?: CallOverrides): Promise<BigNumber>;

    earned(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    endDate(overrides?: CallOverrides): Promise<BigNumber>;

    exit(overrides?: CallOverrides): Promise<void>;

    feeRecipient(overrides?: CallOverrides): Promise<string>;

    fees(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    holderRewardPerTokenPaid(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    knnToken(overrides?: CallOverrides): Promise<string>;

    knnYieldPool(overrides?: CallOverrides): Promise<BigNumber>;

    knnYieldTotalFee(overrides?: CallOverrides): Promise<BigNumber>;

    lastPaymentEvent(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    poolStartDate(overrides?: CallOverrides): Promise<BigNumber>;

    rawBalances(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    reducedFee(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardPerToken(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>;

    rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    started(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    subscribe(
      subscriptionAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    subscriptionFee(overrides?: CallOverrides): Promise<BigNumber>;

    tier(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'Collect(address,address,uint256)'(
      user?: PromiseOrValue<string> | null,
      returnAccount?: PromiseOrValue<string> | null,
      fee?: null,
    ): CollectEventFilter;
    Collect(
      user?: PromiseOrValue<string> | null,
      returnAccount?: PromiseOrValue<string> | null,
      fee?: null,
    ): CollectEventFilter;

    'Fee(address,uint256,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      fee?: null,
      finalAmount?: null,
    ): FeeEventFilter;
    Fee(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      fee?: null,
      finalAmount?: null,
    ): FeeEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'Reward(address,uint256)'(
      user?: PromiseOrValue<string> | null,
      reward?: null,
    ): RewardEventFilter;
    Reward(
      user?: PromiseOrValue<string> | null,
      reward?: null,
    ): RewardEventFilter;

    'RewardAdded(address,uint256)'(
      user?: PromiseOrValue<string> | null,
      reward?: null,
    ): RewardAddedEventFilter;
    RewardAdded(
      user?: PromiseOrValue<string> | null,
      reward?: null,
    ): RewardAddedEventFilter;

    'Subscription(address,uint256,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      subscriptionAmount?: null,
      fee?: null,
      finalAmount?: null,
    ): SubscriptionEventFilter;
    Subscription(
      user?: PromiseOrValue<string> | null,
      subscriptionAmount?: null,
      fee?: null,
      finalAmount?: null,
    ): SubscriptionEventFilter;

    'Withdraw(address,uint256)'(
      user?: PromiseOrValue<string> | null,
      amount?: null,
    ): WithdrawEventFilter;
    Withdraw(
      user?: PromiseOrValue<string> | null,
      amount?: null,
    ): WithdrawEventFilter;
  };

  estimateGas: {
    FEE_BASIS_POINT(overrides?: CallOverrides): Promise<BigNumber>;

    addReward(
      reward: PromiseOrValue<BigNumberish>,
      rewardsDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    balanceOf(
      holder: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    calculateReward(
      holder: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    collectFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    earned(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    endDate(overrides?: CallOverrides): Promise<BigNumber>;

    exit(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    feeRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    fees(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    holderRewardPerTokenPaid(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    knnToken(overrides?: CallOverrides): Promise<BigNumber>;

    knnYieldPool(overrides?: CallOverrides): Promise<BigNumber>;

    knnYieldTotalFee(overrides?: CallOverrides): Promise<BigNumber>;

    lastPaymentEvent(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    poolStartDate(overrides?: CallOverrides): Promise<BigNumber>;

    rawBalances(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    reducedFee(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    rewardPerToken(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>;

    rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    started(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    subscribe(
      subscriptionAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    subscriptionFee(overrides?: CallOverrides): Promise<BigNumber>;

    tier(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FEE_BASIS_POINT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addReward(
      reward: PromiseOrValue<BigNumberish>,
      rewardsDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    balanceOf(
      holder: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    calculateReward(
      holder: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    collectFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    earned(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    endDate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exit(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    feeRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fees(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    holderRewardPerTokenPaid(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    knnToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    knnYieldPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    knnYieldTotalFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastPaymentEvent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastUpdateTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolStartDate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rawBalances(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    reducedFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    rewardPerToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardPerTokenStored(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    rewardRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    started(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    subscribe(
      subscriptionAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    subscriptionFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tier(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
