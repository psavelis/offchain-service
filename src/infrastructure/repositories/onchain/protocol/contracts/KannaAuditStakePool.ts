/* Autogenerated file. Do not edit manually. */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../common';

export declare namespace KannaAuditStakePool {
  export type FeeDiscountStruct = {
    score: PromiseOrValue<BigNumberish>;
    discount: PromiseOrValue<BigNumberish>;
  };

  export type FeeDiscountStructOutput = [number, number] & {
    score: number;
    discount: number;
  };

  export type SettingsStruct = {
    totalPrize: PromiseOrValue<BigNumberish>;
    maxInStakePool: PromiseOrValue<BigNumberish>;
    maxPrizePercentage: PromiseOrValue<BigNumberish>;
    minToStake: PromiseOrValue<BigNumberish>;
    maxToStake: PromiseOrValue<BigNumberish>;
    fee: PromiseOrValue<BigNumberish>;
    minDaysInStake: PromiseOrValue<BigNumberish>;
    feeDiscounts: KannaAuditStakePool.FeeDiscountStruct[];
  };

  export type SettingsStructOutput = [
    BigNumber,
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    KannaAuditStakePool.FeeDiscountStructOutput[],
  ] & {
    totalPrize: BigNumber;
    maxInStakePool: BigNumber;
    maxPrizePercentage: number;
    minToStake: BigNumber;
    maxToStake: BigNumber;
    fee: BigNumber;
    minDaysInStake: number;
    feeDiscounts: KannaAuditStakePool.FeeDiscountStructOutput[];
  };

  export type StakeStruct = {
    wallet: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    timestamp: PromiseOrValue<BigNumberish>;
  };

  export type StakeStructOutput = [string, BigNumber, BigNumber] & {
    wallet: string;
    amount: BigNumber;
    timestamp: BigNumber;
  };
}

export interface KannaAuditStakePoolInterface extends utils.Interface {
  functions: {
    'availableToWithdraw(address)': FunctionFragment;
    'feeOf(address)': FunctionFragment;
    'finalize()': FunctionFragment;
    'initialize(address,uint256,uint256,uint8,uint256,uint256,uint256,uint16,uint8[])': FunctionFragment;
    'isStaked(address)': FunctionFragment;
    'lastStakeId()': FunctionFragment;
    'owner()': FunctionFragment;
    'percentageReached()': FunctionFragment;
    'prizeOf(address)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'scoreOf(address)': FunctionFragment;
    'setScoreProvider(address)': FunctionFragment;
    'settings()': FunctionFragment;
    'stake(uint256)': FunctionFragment;
    'stakeOf(address)': FunctionFragment;
    'status()': FunctionFragment;
    'tokensLeftover()': FunctionFragment;
    'totalStaked()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'transferTokensLeftover(address)': FunctionFragment;
    'withdraw()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'availableToWithdraw'
      | 'feeOf'
      | 'finalize'
      | 'initialize'
      | 'isStaked'
      | 'lastStakeId'
      | 'owner'
      | 'percentageReached'
      | 'prizeOf'
      | 'renounceOwnership'
      | 'scoreOf'
      | 'setScoreProvider'
      | 'settings'
      | 'stake'
      | 'stakeOf'
      | 'status'
      | 'tokensLeftover'
      | 'totalStaked'
      | 'transferOwnership'
      | 'transferTokensLeftover'
      | 'withdraw',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'availableToWithdraw',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'feeOf',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'finalize', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'isStaked',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'lastStakeId',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'percentageReached',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'prizeOf',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'scoreOf',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setScoreProvider',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'settings', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'stake',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'stakeOf',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'status', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'tokensLeftover',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'totalStaked',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferTokensLeftover',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'withdraw', values?: undefined): string;

  decodeFunctionResult(
    functionFragment: 'availableToWithdraw',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'feeOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'finalize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isStaked', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'lastStakeId',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'percentageReached',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'prizeOf', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'scoreOf', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setScoreProvider',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'settings', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakeOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'status', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'tokensLeftover',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalStaked',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferTokensLeftover',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {
    'Finalized(uint256,uint256)': EventFragment;
    'Initialized(address,uint256,uint256,uint8,uint256,uint256,uint256,uint16)': EventFragment;
    'LeftoverTransferred(address,uint256,uint256)': EventFragment;
    'NewStake(uint16,address,uint256,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'ScoreProviderSet(address,uint256)': EventFragment;
    'Withdraw(uint16,address,uint256,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Finalized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LeftoverTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewStake'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ScoreProviderSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export interface FinalizedEventObject {
  percentageReached: BigNumber;
  timestamp: BigNumber;
}
export type FinalizedEvent = TypedEvent<
  [BigNumber, BigNumber],
  FinalizedEventObject
>;

export type FinalizedEventFilter = TypedEventFilter<FinalizedEvent>;

export interface InitializedEventObject {
  tokenAddress: string;
  totalPrize: BigNumber;
  maxInStakePool: BigNumber;
  maxPrizePercentage: number;
  minToStake: BigNumber;
  maxToStake: BigNumber;
  fee: BigNumber;
  minDaysInStake: number;
}
export type InitializedEvent = TypedEvent<
  [
    string,
    BigNumber,
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
  ],
  InitializedEventObject
>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface LeftoverTransferredEventObject {
  recipient: string;
  amount: BigNumber;
  timestamp: BigNumber;
}
export type LeftoverTransferredEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  LeftoverTransferredEventObject
>;

export type LeftoverTransferredEventFilter =
  TypedEventFilter<LeftoverTransferredEvent>;

export interface NewStakeEventObject {
  stakeId: number;
  wallet: string;
  amount: BigNumber;
  timestamp: BigNumber;
}
export type NewStakeEvent = TypedEvent<
  [number, string, BigNumber, BigNumber],
  NewStakeEventObject
>;

export type NewStakeEventFilter = TypedEventFilter<NewStakeEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ScoreProviderSetEventObject {
  scoreProvider: string;
  timestamp: BigNumber;
}
export type ScoreProviderSetEvent = TypedEvent<
  [string, BigNumber],
  ScoreProviderSetEventObject
>;

export type ScoreProviderSetEventFilter =
  TypedEventFilter<ScoreProviderSetEvent>;

export interface WithdrawEventObject {
  stakeId: number;
  wallet: string;
  amount: BigNumber;
  fee: BigNumber;
  timestamp: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [number, string, BigNumber, BigNumber, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface KannaAuditStakePool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: KannaAuditStakePoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    availableToWithdraw(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    feeOf(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    finalize(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    initialize(
      tokenAddress: PromiseOrValue<string>,
      totalPrize: PromiseOrValue<BigNumberish>,
      maxInStakePool: PromiseOrValue<BigNumberish>,
      maxPrizePercentage: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      minToStake: PromiseOrValue<BigNumberish>,
      maxToStake: PromiseOrValue<BigNumberish>,
      minDaysInStake: PromiseOrValue<BigNumberish>,
      feeDiscounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    isStaked(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    lastStakeId(overrides?: CallOverrides): Promise<[number]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    percentageReached(overrides?: CallOverrides): Promise<[BigNumber]>;

    prizeOf(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    scoreOf(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    setScoreProvider(
      scoreProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    settings(
      overrides?: CallOverrides,
    ): Promise<[KannaAuditStakePool.SettingsStructOutput]>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    stakeOf(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[KannaAuditStakePool.StakeStructOutput]>;

    status(overrides?: CallOverrides): Promise<[number]>;

    tokensLeftover(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalStaked(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferTokensLeftover(
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  availableToWithdraw(
    wallet: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  feeOf(
    wallet: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  finalize(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  initialize(
    tokenAddress: PromiseOrValue<string>,
    totalPrize: PromiseOrValue<BigNumberish>,
    maxInStakePool: PromiseOrValue<BigNumberish>,
    maxPrizePercentage: PromiseOrValue<BigNumberish>,
    fee: PromiseOrValue<BigNumberish>,
    minToStake: PromiseOrValue<BigNumberish>,
    maxToStake: PromiseOrValue<BigNumberish>,
    minDaysInStake: PromiseOrValue<BigNumberish>,
    feeDiscounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  isStaked(
    wallet: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  lastStakeId(overrides?: CallOverrides): Promise<number>;

  owner(overrides?: CallOverrides): Promise<string>;

  percentageReached(overrides?: CallOverrides): Promise<BigNumber>;

  prizeOf(
    wallet: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  scoreOf(
    wallet: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  setScoreProvider(
    scoreProvider: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  settings(
    overrides?: CallOverrides,
  ): Promise<KannaAuditStakePool.SettingsStructOutput>;

  stake(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  stakeOf(
    wallet: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<KannaAuditStakePool.StakeStructOutput>;

  status(overrides?: CallOverrides): Promise<number>;

  tokensLeftover(overrides?: CallOverrides): Promise<BigNumber>;

  totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferTokensLeftover(
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    availableToWithdraw(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    feeOf(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    finalize(overrides?: CallOverrides): Promise<void>;

    initialize(
      tokenAddress: PromiseOrValue<string>,
      totalPrize: PromiseOrValue<BigNumberish>,
      maxInStakePool: PromiseOrValue<BigNumberish>,
      maxPrizePercentage: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      minToStake: PromiseOrValue<BigNumberish>,
      maxToStake: PromiseOrValue<BigNumberish>,
      minDaysInStake: PromiseOrValue<BigNumberish>,
      feeDiscounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    isStaked(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    lastStakeId(overrides?: CallOverrides): Promise<number>;

    owner(overrides?: CallOverrides): Promise<string>;

    percentageReached(overrides?: CallOverrides): Promise<BigNumber>;

    prizeOf(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    scoreOf(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    setScoreProvider(
      scoreProvider: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    settings(
      overrides?: CallOverrides,
    ): Promise<KannaAuditStakePool.SettingsStructOutput>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    stakeOf(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<KannaAuditStakePool.StakeStructOutput>;

    status(overrides?: CallOverrides): Promise<number>;

    tokensLeftover(overrides?: CallOverrides): Promise<BigNumber>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    transferTokensLeftover(
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'Finalized(uint256,uint256)'(
      percentageReached?: null,
      timestamp?: null,
    ): FinalizedEventFilter;
    Finalized(percentageReached?: null, timestamp?: null): FinalizedEventFilter;

    'Initialized(address,uint256,uint256,uint8,uint256,uint256,uint256,uint16)'(
      tokenAddress?: null,
      totalPrize?: null,
      maxInStakePool?: null,
      maxPrizePercentage?: null,
      minToStake?: null,
      maxToStake?: null,
      fee?: null,
      minDaysInStake?: null,
    ): InitializedEventFilter;
    Initialized(
      tokenAddress?: null,
      totalPrize?: null,
      maxInStakePool?: null,
      maxPrizePercentage?: null,
      minToStake?: null,
      maxToStake?: null,
      fee?: null,
      minDaysInStake?: null,
    ): InitializedEventFilter;

    'LeftoverTransferred(address,uint256,uint256)'(
      recipient?: PromiseOrValue<string> | null,
      amount?: null,
      timestamp?: null,
    ): LeftoverTransferredEventFilter;
    LeftoverTransferred(
      recipient?: PromiseOrValue<string> | null,
      amount?: null,
      timestamp?: null,
    ): LeftoverTransferredEventFilter;

    'NewStake(uint16,address,uint256,uint256)'(
      stakeId?: PromiseOrValue<BigNumberish> | null,
      wallet?: PromiseOrValue<string> | null,
      amount?: null,
      timestamp?: null,
    ): NewStakeEventFilter;
    NewStake(
      stakeId?: PromiseOrValue<BigNumberish> | null,
      wallet?: PromiseOrValue<string> | null,
      amount?: null,
      timestamp?: null,
    ): NewStakeEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'ScoreProviderSet(address,uint256)'(
      scoreProvider?: null,
      timestamp?: null,
    ): ScoreProviderSetEventFilter;
    ScoreProviderSet(
      scoreProvider?: null,
      timestamp?: null,
    ): ScoreProviderSetEventFilter;

    'Withdraw(uint16,address,uint256,uint256,uint256)'(
      stakeId?: PromiseOrValue<BigNumberish> | null,
      wallet?: PromiseOrValue<string> | null,
      amount?: null,
      fee?: null,
      timestamp?: null,
    ): WithdrawEventFilter;
    Withdraw(
      stakeId?: PromiseOrValue<BigNumberish> | null,
      wallet?: PromiseOrValue<string> | null,
      amount?: null,
      fee?: null,
      timestamp?: null,
    ): WithdrawEventFilter;
  };

  estimateGas: {
    availableToWithdraw(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    feeOf(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    finalize(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    initialize(
      tokenAddress: PromiseOrValue<string>,
      totalPrize: PromiseOrValue<BigNumberish>,
      maxInStakePool: PromiseOrValue<BigNumberish>,
      maxPrizePercentage: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      minToStake: PromiseOrValue<BigNumberish>,
      maxToStake: PromiseOrValue<BigNumberish>,
      minDaysInStake: PromiseOrValue<BigNumberish>,
      feeDiscounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    isStaked(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    lastStakeId(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    percentageReached(overrides?: CallOverrides): Promise<BigNumber>;

    prizeOf(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    scoreOf(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    setScoreProvider(
      scoreProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    settings(overrides?: CallOverrides): Promise<BigNumber>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    stakeOf(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    status(overrides?: CallOverrides): Promise<BigNumber>;

    tokensLeftover(overrides?: CallOverrides): Promise<BigNumber>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferTokensLeftover(
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    availableToWithdraw(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    feeOf(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    finalize(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    initialize(
      tokenAddress: PromiseOrValue<string>,
      totalPrize: PromiseOrValue<BigNumberish>,
      maxInStakePool: PromiseOrValue<BigNumberish>,
      maxPrizePercentage: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      minToStake: PromiseOrValue<BigNumberish>,
      maxToStake: PromiseOrValue<BigNumberish>,
      minDaysInStake: PromiseOrValue<BigNumberish>,
      feeDiscounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    isStaked(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    lastStakeId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    percentageReached(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prizeOf(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    scoreOf(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    setScoreProvider(
      scoreProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    settings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    stakeOf(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    status(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokensLeftover(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferTokensLeftover(
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
