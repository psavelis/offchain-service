/* Autogenerated file. Do not edit manually. */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface KannaStockOptionManagerInterface extends utils.Interface {
  functions: {
    "availableToWithdraw()": FunctionFragment;
    "contractTemplate()": FunctionFragment;
    "contracts()": FunctionFragment;
    "deployContract()": FunctionFragment;
    "hasContract(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "registerContract(address)": FunctionFragment;
    "registerContractUnsafe(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "totalVested()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unregisterContract(address)": FunctionFragment;
    "updateTemplate(address)": FunctionFragment;
    "vestingForecast(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "availableToWithdraw"
      | "contractTemplate"
      | "contracts"
      | "deployContract"
      | "hasContract"
      | "owner"
      | "registerContract"
      | "registerContractUnsafe"
      | "renounceOwnership"
      | "totalVested"
      | "transferOwnership"
      | "unregisterContract"
      | "updateTemplate"
      | "vestingForecast"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "availableToWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractTemplate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "contracts", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deployContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerContractUnsafe",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalVested",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTemplate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "vestingForecast",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "availableToWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "contracts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerContractUnsafe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVested",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingForecast",
    data: BytesLike
  ): Result;

  events: {
    "ContractRegistered(address,uint16)": EventFragment;
    "ContractTemplateUpdated(address)": EventFragment;
    "ContractUnregistered(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContractRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractTemplateUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractUnregistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface ContractRegisteredEventObject {
  contractAddress: string;
  nonce: number;
}
export type ContractRegisteredEvent = TypedEvent<
  [string, number],
  ContractRegisteredEventObject
>;

export type ContractRegisteredEventFilter =
  TypedEventFilter<ContractRegisteredEvent>;

export interface ContractTemplateUpdatedEventObject {
  contractAddress: string;
}
export type ContractTemplateUpdatedEvent = TypedEvent<
  [string],
  ContractTemplateUpdatedEventObject
>;

export type ContractTemplateUpdatedEventFilter =
  TypedEventFilter<ContractTemplateUpdatedEvent>;

export interface ContractUnregisteredEventObject {
  contractAddress: string;
}
export type ContractUnregisteredEvent = TypedEvent<
  [string],
  ContractUnregisteredEventObject
>;

export type ContractUnregisteredEventFilter =
  TypedEventFilter<ContractUnregisteredEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface KannaStockOptionManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: KannaStockOptionManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    availableToWithdraw(overrides?: CallOverrides): Promise<[BigNumber]>;

    contractTemplate(overrides?: CallOverrides): Promise<[string]>;

    contracts(overrides?: CallOverrides): Promise<[string[]]>;

    deployContract(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasContract(
      _contract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    registerContract(
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerContractUnsafe(
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalVested(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unregisterContract(
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateTemplate(
      _contractTemplate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vestingForecast(
      date: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  availableToWithdraw(overrides?: CallOverrides): Promise<BigNumber>;

  contractTemplate(overrides?: CallOverrides): Promise<string>;

  contracts(overrides?: CallOverrides): Promise<string[]>;

  deployContract(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasContract(
    _contract: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  registerContract(
    _contract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerContractUnsafe(
    _contract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalVested(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unregisterContract(
    _contract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateTemplate(
    _contractTemplate: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vestingForecast(
    date: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    availableToWithdraw(overrides?: CallOverrides): Promise<BigNumber>;

    contractTemplate(overrides?: CallOverrides): Promise<string>;

    contracts(overrides?: CallOverrides): Promise<string[]>;

    deployContract(overrides?: CallOverrides): Promise<void>;

    hasContract(
      _contract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    registerContract(
      _contract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerContractUnsafe(
      _contract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    totalVested(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unregisterContract(
      _contract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTemplate(
      _contractTemplate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    vestingForecast(
      date: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "ContractRegistered(address,uint16)"(
      contractAddress?: null,
      nonce?: null
    ): ContractRegisteredEventFilter;
    ContractRegistered(
      contractAddress?: null,
      nonce?: null
    ): ContractRegisteredEventFilter;

    "ContractTemplateUpdated(address)"(
      contractAddress?: null
    ): ContractTemplateUpdatedEventFilter;
    ContractTemplateUpdated(
      contractAddress?: null
    ): ContractTemplateUpdatedEventFilter;

    "ContractUnregistered(address)"(
      contractAddress?: null
    ): ContractUnregisteredEventFilter;
    ContractUnregistered(
      contractAddress?: null
    ): ContractUnregisteredEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    availableToWithdraw(overrides?: CallOverrides): Promise<BigNumber>;

    contractTemplate(overrides?: CallOverrides): Promise<BigNumber>;

    contracts(overrides?: CallOverrides): Promise<BigNumber>;

    deployContract(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasContract(
      _contract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    registerContract(
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerContractUnsafe(
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalVested(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unregisterContract(
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateTemplate(
      _contractTemplate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vestingForecast(
      date: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    availableToWithdraw(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractTemplate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contracts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployContract(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasContract(
      _contract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerContract(
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerContractUnsafe(
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalVested(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unregisterContract(
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateTemplate(
      _contractTemplate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vestingForecast(
      date: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
